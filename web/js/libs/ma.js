// Generated by CoffeeScript 1.7.1
define(['jquery', 'api', 'utils'], function($, api, utils) {
  var awesomify, ma, mn, mystify, prepare;
  mn = {
    distance: {
      lat: 1,
      lng: 2
    },
    threshold: 4.0,
    hours: 12,
    defaultDuration: 3,
    extraDay: 1
  };
  prepare = function(stops, attractions) {
    var a, cities, city, end, end_lat, end_lng, id, ids, key, lat, lng, ranks, result, score, start, start_lat, start_lng, _i, _j, _len, _len1, _ref;
    cities = {};
    ranks = [];
    ids = [];
    start = stops.start;
    end = stops.end;
    start_lat = start.lat < end.lat ? start.lat - mn.distance.lat : start.lat + mn.distance.lat;
    start_lng = start.lng < end.lng ? start.lng - mn.distance.lng : start.lng + mn.distance.lng;
    end_lat = end.lat < start.lat ? end.lat - mn.distance.lat : end.lat + mn.distance.lat;
    end_lng = end.lng < start.lng ? end.lng - mn.distance.lng : end.lng + mn.distance.lng;
    for (_i = 0, _len = attractions.length; _i < _len; _i++) {
      a = attractions[_i];
      id = a.location_id;
      if (ids.indexOf(id) >= 0) {
        continue;
      }
      lat = a.latitude;
      lng = a.longitude;
      if (!(start_lat <= lat && lat <= end_lat || start_lat >= lat && lat >= end_lat)) {
        continue;
      }
      if (!(start_lng <= lng && lng <= end_lng || start_lng >= lng && lng >= end_lng)) {
        continue;
      }
      ids.push(id);
      city = a.ancestors[0].name;
      if (cities[city] == null) {
        cities[city] = [];
      }
      score = (a.percent_recommended * 1.0 / 100.0) * a.num_reviews * a.rating;
      a.score = score;
      cities[city].push(a);
      ranks.push(a);
    }
    _ref = utils.keys(cities);
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      key = _ref[_j];
      cities[key].sort(function(a, b) {
        return b.score - a.score;
      });
    }
    ranks.sort(function(a, b) {
      return b.score - a.score;
    });
    result = {
      cities: cities,
      ranks: ranks
    };
    return result;
  };
  awesomify = function(stops, attractions, cb) {
    var attraction, cities, city, cityDuration, cost, currentHours, data, days, duration, end, endCity, find, inserted, j, key, keys, lat, lng, max, name, names, p, sortedCities, start, startCity, totalHours, trip, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref;
    console.log('attractions to deal with');
    data = prepare(stops, attractions);
    console.log(data);
    start = stops.start;
    end = stops.end;
    days = stops.days;
    cities = [];
    inserted = [];
    names = utils.keys(data.cities);
    duration = 0;
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      attractions = data.cities[name];
      find = false;
      if (stops.list != null) {
        keys = utils.keys(stops.list);
        for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
          key = keys[_j];
          if (stops.list[key].name === name) {
            duration = stops.list[key].stay;
            if (duration == null) {
              duration = Math.round(attractions.length / mn.threshold);
            }
            find = true;
            break;
          }
        }
        if (!find) {
          duration = Math.round(attractions.length / mn.threshold);
        }
      } else {
        duration = Math.round(attractions.length / mn.threshold);
      }
      if (duration === 0) {
        duration = 1;
      }
      max = mn.extraDay + Math.round(attractions.length / mn.threshold);
      if (duration > max) {
        duration = max;
      }
      city = {
        name: name,
        duration: duration,
        address: attractions[0].location_string,
        must: find,
        score: 0,
        attractions: []
      };
      totalHours = mn.hours * duration;
      currentHours = 0;
      for (_k = 0, _len2 = attractions.length; _k < _len2; _k++) {
        attraction = attractions[_k];
        cost = ma.attractions.durations[attraction.subcategory[1].name];
        if (cost == null) {
          cost = ma.attractions.durations[attraction.subcategory[0].name];
        }
        if (cost == null) {
          cost = mn.defaultDuration;
        }
        if (currentHours + cost > totalHours) {
          break;
        }
        attraction.duration = cost;
        currentHours += cost;
        city.attractions.push(attraction);
        city.score += attraction.score;
      }
      cities.push(city);
    }
    cities.sort(function(a, b) {
      return b.score - a.score;
    });
    cityDuration = function(cities) {
      var total, _l, _len3;
      total = 0;
      for (_l = 0, _len3 = cities.length; _l < _len3; _l++) {
        city = cities[_l];
        total += city.duration;
      }
      return total;
    };
    for (j = _l = 0, _ref = cities.length; 0 <= _ref ? _l < _ref : _l > _ref; j = 0 <= _ref ? ++_l : --_l) {
      if (cityDuration(cities) <= days) {
        break;
      }
      p = cities.pop();
      if (p.must) {
        cities.unshift(p);
      }
    }
    sortedCities = [];
    startCity = null;
    endCity = null;
    for (_m = 0, _len3 = cities.length; _m < _len3; _m++) {
      city = cities[_m];
      lat = city.attractions[0].latitude;
      lng = city.attractions[0].longitude;
      if (city.name === start.name) {
        startCity = city;
        continue;
      } else if (city.name === end.name) {
        endCity = city;
        continue;
      }
      city.distance = (lat - start.lat) * (lat - start.lat) * (lng - start.lng) * (lng - start.lng);
      sortedCities.push(city);
    }
    sortedCities.sort(function(a, b) {
      return a.distance - b.distance;
    });
    sortedCities.unshift(startCity);
    sortedCities.push(endCity);
    trip = {
      cities: sortedCities,
      ranks: data.ranks
    };
    return cb(trip);
  };
  mystify = function(list, days, options, cb) {
    var attractions, categorize, end, i, keys, number, output, start, todo, _i, _results;
    categorize = function(preferences) {
      var p, qs, _i, _len;
      if (preferences != null) {
        qs = '';
        for (_i = 0, _len = preferences.length; _i < _len; _i++) {
          p = preferences[_i];
          qs += p + ',';
        }
        qs = qs.substr(0, qs.length - 1);
        return qs;
      } else {
        return null;
      }
    };
    if (cb == null) {
      cb = options;
      options = null;
    }
    if (options == null) {
      options = {};
    }
    console.log('Something to mystify:');
    console.log(list);
    console.log(days);
    output = {};
    keys = utils.keys(list);
    number = keys.length;
    switch (number) {
      case 1:
        break;
      default:
        start = list[keys[0]];
        end = list[keys[number - 1]];
        todo = number * 2;
        attractions = [];
        _results = [];
        for (i = _i = 0; 0 <= number ? _i < number : _i > number; i = 0 <= number ? ++_i : --_i) {
          _results.push(api.taIds({
            lat: list[keys[i]].lat,
            lng: list[keys[i]].lng
          }, function(result) {
            api.taLocation(result.city.id, {
              type: 'attractions',
              subcategory: categorize(options.preferences)
            }, function(result) {
              var item, _j, _len, _ref;
              _ref = result.data;
              for (_j = 0, _len = _ref.length; _j < _len; _j++) {
                item = _ref[_j];
                attractions.push(item);
              }
              todo--;
              if (todo === 0) {
                return awesomify({
                  start: start,
                  end: end,
                  days: days,
                  list: list
                }, attractions, cb);
              }
            });
            return api.taLocation(result.country.id, {
              type: 'attractions',
              subcategory: categorize(options.preferences)
            }, function(result) {
              var item, _j, _len, _ref;
              _ref = result.data;
              for (_j = 0, _len = _ref.length; _j < _len; _j++) {
                item = _ref[_j];
                attractions.push(item);
              }
              todo--;
              if (todo === 0) {
                return awesomify({
                  start: start,
                  end: end,
                  days: days,
                  list: list
                }, attractions, cb);
              }
            });
          }));
        }
        return _results;
    }
  };
  return ma = {
    attractions: {
      subcategories: {
        'Other': 'other',
        'Nightlife': 'nightlife',
        'Shopping': 'shopping',
        'Bar': 'bars',
        'Club': 'clubs',
        'Food & Drink': 'food_drink',
        'Ranch Farm': 'ranch_farm',
        'Adventure': 'adventure',
        'Gear Rental': 'gear_rentals',
        'Wellness & Spa': 'wellness_spas',
        'Class': 'classes',
        'Sightseeing Tour': 'sightseeing_tours',
        'Performance': 'performances',
        'Sport': 'sports',
        'Outdoor': 'outdoors',
        'Amusement': 'amusement',
        'Landmark': 'landmarks',
        'Zoo & Aquarium': 'zoos_aquariums',
        'Museums': 'museums',
        'Cultural': 'cultural'
      },
      durations: {
        'other': 5,
        'nightlife': 5,
        'shopping': 4,
        'bars': 3,
        'clubs': 3,
        'food_drink': 2,
        'ranch_farm': 3,
        'adventure': 6,
        'gear_rentals': 3,
        'wellness_spas': 3,
        'class': 2,
        'sightseeing_tours': 8,
        'performances': 4,
        'sports': 4,
        'outdoors': 6,
        'amusement': 4,
        'landmarks': 3,
        'zoos_aquariums': 3,
        'museums': 6,
        'cultural': 4
      },
      times: {
        'other': 0,
        'nightlife': 5,
        'shopping': 3,
        'bars': 4,
        'clubs': 4,
        'food_drink': 4,
        'ranch_farm': 2,
        'adventure': 2,
        'gear_rentals': 2,
        'wellness_spas': 3,
        'classes': 2,
        'sightseeing_tours': 1,
        'performances': 5,
        'sports': 5,
        'outdoors': 2,
        'amusement': 4,
        'landmarks': 2,
        'zoos_aquariums': 4,
        'museums': 2,
        'cultural': 2
      }
    },
    search: function(input, cb) {
      var city, inserted, list, options, _i, _len, _ref;
      options = {
        preferences: input.preferences || ['adventure', 'outdoors', 'landmarks', 'museums', 'cultural'],
        stays: input.stays
      };
      list = {};
      inserted = [];
      _ref = input.cities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        city = _ref[_i];
        if (inserted.indexOf(city) >= 0) {
          continue;
        }
        inserted.push(city);
        list[city] = {
          address: city
        };
      }
      return api.geoCode(list, function(result) {
        var counter, key, keys, _j, _len1;
        if (options.stays != null) {
          counter = 0;
          keys = utils.keys(result);
          for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
            key = keys[_j];
            result[key].stay = options.stays[counter];
            counter++;
          }
        }
        return mystify(result, input.days, options, function(result) {
          return api.saveTrip(result.cities, function(id) {
            var i, j, _k, _l, _ref1, _ref2;
            for (i = _k = 0, _ref1 = result.cities.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
              for (j = _l = 0, _ref2 = result.cities[i].attractions.length; 0 <= _ref2 ? _l < _ref2 : _l > _ref2; j = 0 <= _ref2 ? ++_l : --_l) {
                result.cities[i].attractions[j] = JSON.parse(result.cities[i].attractions[j]);
              }
            }
            localStorage.setItem(id, JSON.stringify(result));
            console.log(result);
            return cb(id);
          });
        });
      });
    },
    load: function(id) {
      return JSON.parse(localStorage.getItem(id));
    }
  };
});
