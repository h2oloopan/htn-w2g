// Generated by CoffeeScript 1.7.1
define(['jquery'], function($) {
  var gKey, geoCode, geoUrl, get, ma, taKey, taUrl;
  taKey = '379b8b313eaf439d92c521e5fe64a8ce';
  taUrl = 'http://api.tripadvisor.com/api/partner/2.0';
  gKey = 'AIzaSyC-5SLDR76m00GGODHxQ6gXGYtB4sXmP2s';
  geoUrl = 'https://maps.googleapis.com/maps/api/geocode/json?address=';
  get = function(url, done) {
    return $.ajax({
      type: 'GET',
      url: url,
      dataType: 'json'
    }).done(done).fail(function(a, b, c) {
      console.log(a);
      console.log(b);
      return console.log(c);
    });
  };
  geoCode = function(list, cb) {
    var key, keys, total, _fn, _i, _len;
    keys = ma.keys(list);
    total = keys.length;
    _fn = function(key) {
      var item, url;
      item = list[key];
      url = geoUrl + key + '&key=' + gKey;
      return get(url, function(result) {
        var location;
        location = result.results[0].geometry.location;
        list[key].lat = location.lat;
        list[key].lng = location.lng;
        total--;
        if (total === 0) {
          return cb(list);
        }
      });
    };
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      _fn(key);
    }
  };
  return ma = {
    search: function(input, cb) {
      var city, list, _i, _len, _ref;
      list = {};
      _ref = input.cities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        city = _ref[_i];
        list[city] = {
          address: city
        };
      }
      return geoCode(list, function(result) {
        console.log(result);
        return cb;
      });
    },
    keys: function(obj) {
      var func;
      if (!Object.keys) {
        func = function(obj) {
          var hasOwnProperty, prop, result;
          hasOwnProperty = Object.prototype.hasOwnProperty;
          if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
            throw new TypeError('Object.keys called on non-object');
            return;
          }
          result = [];
          for (prop in obj) {
            if (hasOwnProperty.call(obj, prop)) {
              result.push(prop);
            }
          }
          return result;
        };
        return func(obj);
      } else {
        return Object.keys(obj);
      }
    },
    serialize: function(element, trim) {
      var a, form, o;
      if (trim == null) {
        trim = false;
      }
      o = {};
      if ($(element).is('form')) {
        form = element;
      } else {
        form = $('<form></form>').append($(element).clone());
      }
      a = form.serializeArray();
      $.each(a, function() {
        var value;
        if (o[this.name] !== void 0) {
          if (!o[this.name].push) {
            o[this.name] = [o[this.name]];
          }
          value = this.value || '';
          if (trim) {
            value = $.trim(value);
          }
          return o[this.name].push(value);
        } else {
          value = this.value || '';
          if (trim) {
            value = $.trim(value);
          }
          return o[this.name] = value;
        }
      });
      return o;
    },
    mock: function() {
      var fake;
      fake = [
        {
          day: 1,
          city: {
            name: 'London',
            address: 'London, United Kingdom',
            photo: 'http://i.telegraph.co.uk/multimedia/archive/02423/london_2423609b.jpg'
          },
          attractions: [
            {
              name: 'London Eye',
              duration: 2,
              address: 'Riverside Bldg, County Hall Westminster Bridge Rd London SE1 7PB, United Kingdom',
              photo: 'http://cdn.londonandpartners.com/asset/20adda9d08e8480c6dbbfcf30fbcabdb.jpg'
            }, {
              name: 'The National Gallery',
              duration: 8,
              address: 'Trafalgar Square London WC2N 5DN United Kingdom',
              photo: 'http://ichef.bbci.co.uk/arts/yourpaintings/images/collections/main/NG_collection_image_1.jpg'
            }
          ]
        }
      ];
      return fake;
    },
    api: {
      ta: {
        location: function(id, option, cb) {
          var url;
          if (cb == null) {
            cb = option;
            option = null;
          }
          url = taUrl + '/location/' + id;
          if (option != null) {
            url += '/' + option;
          }
          url += '?key=' + taKey;
          return get(url, cb);
        },
        map: function(coords, option, cb) {
          var url;
          if (cb == null) {
            cb = option;
            option = null;
          }
          url = taUrl + '/map/' + coords.lat + ',' + coords.lng;
          if (option != null) {
            url += '/' + option;
          }
          url += '?key=' + taKey;
          return get(url, cb);
        }
      }
    }
  };
});
